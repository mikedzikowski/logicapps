{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.7.4.23292",
      "templateHash": "13180268401737732729"
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "[deployment().location]",
      "metadata": {
        "description": "The location for the resources deployed in this solution."
      }
    },
    "templateSpecId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The Template Spec version ID that will be used to by the rip and replace AVD solution."
      }
    },
    "Environment": {
      "type": "string",
      "defaultValue": "d",
      "metadata": {
        "description": "The target environment for the solution. This value will be used by naming convention if exisiting resources are not targeted."
      },
      "allowedValues": [
        "p",
        "d",
        "s"
      ]
    },
    "exisitingAutomationAccount": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Set the following values if there are exisiting resource groups, automation accounts, or storage account that should be targeted. If values are not set a default naming convention will be used by resources created."
      }
    },
    "existingAutomationAccountRg": {
      "type": "string",
      "defaultValue": ""
    },
    "existingLogicAppRg": {
      "type": "string",
      "defaultValue": ""
    },
    "exisitingStorageAccount": {
      "type": "string",
      "defaultValue": ""
    },
    "existingStorageAccountRg": {
      "type": "string",
      "defaultValue": ""
    },
    "hostPoolName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Host pool name to target."
      }
    },
    "hostPoolResourceGroupName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Host pool resource group name to target."
      }
    },
    "sessionHostResourceGroupName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Session host resource group name to target."
      }
    },
    "deploymentNameSuffix": {
      "type": "string",
      "defaultValue": "[utcNow()]",
      "metadata": {
        "description": "deployment name suffix."
      }
    },
    "recurrenceFrequency": {
      "type": "string",
      "defaultValue": "Day",
      "metadata": {
        "description": "Frequency of logic app trigger for Image Check Logic App."
      },
      "allowedValues": [
        "Month",
        "Week",
        "Day",
        "Hour",
        "Minute",
        "Second"
      ]
    },
    "recurrenceInterval": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "Interval of logic app trigger for Image Check Logic App."
      }
    },
    "emailContact": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "E-mail contact or group used by logic app approval workflow."
      }
    },
    "triggerFrequency": {
      "type": "string",
      "defaultValue": "Day",
      "metadata": {
        "description": "Frequency of logic app trigger for Blob Check Logic App."
      },
      "allowedValues": [
        "Month",
        "Week",
        "Day",
        "Hour",
        "Minute",
        "Second"
      ]
    },
    "triggerInterval": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "Interval of logic app trigger for Blob Check Logic App."
      }
    },
    "dayOfWeek": {
      "type": "string",
      "defaultValue": "Saturday",
      "metadata": {
        "description": "The target maintenance window day for AVD"
      },
      "allowedValues": [
        "Monday",
        "Tuesday",
        "Wednesday",
        "Thursday",
        "Friday",
        "Saturday",
        "Sunday"
      ]
    },
    "dayOfWeekOccurrence": {
      "type": "string",
      "defaultValue": "First",
      "metadata": {
        "description": "The target maintenance window week occurrence for AVD"
      },
      "allowedValues": [
        "First",
        "Second",
        "Third",
        "Fourth",
        "LastDay"
      ]
    },
    "startTime": {
      "type": "string",
      "defaultValue": "23:00",
      "metadata": {
        "description": "The target maintenance window start time for AVD"
      }
    },
    "storageAccountType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "metadata": {
        "description": "The storage SKU for the application blob storage."
      },
      "allowedValues": [
        "Premium_LRS",
        "Premium_ZRS",
        "Standard_GRS",
        "Standard_GZRS",
        "Standard_LRS",
        "Standard_RAGRS",
        "Standard_RAGZRS",
        "Standard_ZRS"
      ]
    },
    "container": {
      "type": "string",
      "defaultValue": ""
    },
    "keyVaultName": {
      "type": "string",
      "defaultValue": "kv-fs-contoso-va-d-01",
      "metadata": {
        "description": "The name of the key vault where secrets will be stored and consumed by runbooks. If deploying a new key vault, this value must be globally unique."
      }
    }
  },
  "variables": {
    "cloud": "[environment().name]",
    "tenantId": "[tenant().tenantId]",
    "subscriptionId": "[subscription().subscriptionId]",
    "workflows_GetImageVersion_name": "[format('la-{0}-avd-imageVersion', parameters('hostPoolName'))]",
    "workflows_GetBlobUpdate_name": "[format('la-{0}-avd-blobUpdate', parameters('hostPoolName'))]",
    "recurrenceType": "Recurrence",
    "waitForRunBook": true,
    "officeConnectionName": "office365",
    "automationAccountConnectionName": "azureautomation",
    "blobConnectionName": "azureblob",
    "identityType": "SystemAssigned",
    "state": "Enabled",
    "schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
    "contentVersion": "1.0.0.0",
    "connectionType": "Object",
    "checkBothCreatedAndModifiedDateTime": false,
    "maxFileCount": 10,
    "roleId": "b24988ac-6180-42a0-ab88-20f7382dd24c",
    "runbookNewHostPoolRipAndReplace": "Start-AzureVirtualDesktopRipAndReplace",
    "runbookScheduleRunbookName": "Get-RunBookSchedule",
    "runbookGetSessionHostVm": "Get-SessionHostVirtualMachine",
    "runbookMarketPlaceImageVersion": "Get-MarketPlaceImageVersion",
    "runbooks": [
      {
        "name": "Get-RunBookSchedule",
        "uri": "https://raw.githubusercontent.com/mikedzikowski/logicapps/main/runbooks/Get-RunBookSchedule.ps1"
      },
      {
        "name": "Get-MarketPlaceImageVersion",
        "uri": "https://raw.githubusercontent.com/mikedzikowski/logicapps/main/runbooks/Get-MarketPlaceImageVersion.ps1"
      },
      {
        "name": "Get-SessionHostVirtualMachine",
        "uri": "https://raw.githubusercontent.com/mikedzikowski/logicapps/main/runbooks/Get-SessionHostVirtualMachine.ps1"
      },
      {
        "name": "Start-AzureVirtualDesktopRipAndReplace",
        "uri": "https://raw.githubusercontent.com/mikedzikowski/logicapps/main/runbooks/Start-AzureVirtualDesktopRipAndReplace.ps1"
      },
      {
        "name": "New-AutomationSchedule",
        "uri": "https://raw.githubusercontent.com/mikedzikowski/logicapps/main/runbooks/New-AutomationSchedule.ps1"
      }
    ],
    "LocationShortNames": {
      "australiacentral": "ac",
      "australiacentral2": "ac2",
      "australiaeast": "ae",
      "australiasoutheast": "as",
      "brazilsouth": "bs2",
      "brazilsoutheast": "bs",
      "canadacentral": "cc",
      "canadaeast": "ce",
      "centralindia": "ci",
      "centralus": "cu",
      "eastasia": "ea",
      "eastus": "eu",
      "eastus2": "eu2",
      "francecentral": "fc",
      "francesouth": "fs",
      "germanynorth": "gn",
      "germanywestcentral": "gwc",
      "japaneast": "je",
      "japanwest": "jw",
      "jioindiacentral": "jic",
      "jioindiawest": "jiw",
      "koreacentral": "kc",
      "koreasouth": "ks",
      "northcentralus": "ncu",
      "northeurope": "ne",
      "norwayeast": "ne2",
      "norwaywest": "nw",
      "southafricanorth": "san",
      "southafricawest": "saw",
      "southcentralus": "scu",
      "southeastasia": "sa",
      "southindia": "si",
      "swedencentral": "sc",
      "switzerlandnorth": "sn",
      "switzerlandwest": "sw",
      "uaecentral": "uc",
      "uaenorth": "un",
      "uksouth": "us",
      "ukwest": "uw",
      "usdodcentral": "uc",
      "usdodeast": "ue",
      "usgovarizona": "az",
      "usgoviowa": "ia",
      "usgovtexas": "tx",
      "usgovvirginia": "va",
      "westcentralus": "wcu",
      "westeurope": "we",
      "westindia": "wi",
      "westus": "wu",
      "westus2": "wu2",
      "westus3": "wu3"
    },
    "LocationShortName": "[variables('LocationShortNames')[parameters('location')]]",
    "NamingStandard": "[format('{0}-{1}', parameters('Environment'), variables('LocationShortName'))]",
    "storageAccountName": "[replace(format('sa{0}', variables('NamingStandard')), '-', '')]",
    "automationAccountRgVar": "[if(not(empty(parameters('existingAutomationAccountRg'))), createArray(parameters('existingAutomationAccountRg')), createArray(format('rg-{0}-aa', variables('NamingStandard'))))]",
    "logicAppRgVar": "[if(not(empty(parameters('existingLogicAppRg'))), createArray(parameters('existingLogicAppRg')), createArray(format('rg-{0}-la', variables('NamingStandard'))))]",
    "storageAccountRgVar": "[if(not(empty(parameters('existingStorageAccountRg'))), createArray(parameters('existingStorageAccountRg')), createArray(format('rg-{0}-stg', variables('NamingStandard'))))]",
    "storageAccountNameVar": "[if(not(empty(parameters('exisitingStorageAccount'))), createArray(parameters('exisitingStorageAccount')), createArray(replace(variables('storageAccountName'), 'sa', uniqueString(variables('NamingStandard')))))]",
    "automationAccountNameVar": "[if(not(empty(parameters('exisitingAutomationAccount'))), createArray(parameters('exisitingAutomationAccount')), createArray(replace(format('aa-{0}', variables('NamingStandard')), 'aa', uniqueString(variables('NamingStandard')))))]",
    "rg": "[array(concat(variables('automationAccountRgVar'), variables('logicAppRgVar'), variables('storageAccountRgVar')))]",
    "rgVals": "[array(concat(variables('automationAccountRgVar'), variables('logicAppRgVar'), variables('storageAccountRgVar')))]",
    "ResourceGroups": "[union(variables('rg'), variables('rgVals'))]",
    "storageAccountNameValue": "[first(variables('storageAccountNameVar'))]",
    "automationAccountNameValue": "[first(variables('automationAccountNameVar'))]"
  },
  "resources": [
    {
      "copy": {
        "name": "resourceGroups",
        "count": "[length(range(0, length(variables('ResourceGroups'))))]"
      },
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2020-10-01",
      "name": "[variables('ResourceGroups')[range(0, length(variables('ResourceGroups')))[copyIndex()]]]",
      "location": "[parameters('location')]"
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('sa-deployment-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[variables('subscriptionId')]",
      "resourceGroup": "[variables('rg')[2]]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "storageAccountName": {
            "value": "[variables('storageAccountNameValue')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "storageAccountType": {
            "value": "[parameters('storageAccountType')]"
          },
          "containerName": {
            "value": "[parameters('container')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.7.4.23292",
              "templateHash": "6331672754009672065"
            }
          },
          "parameters": {
            "storageAccountType": {
              "type": "string",
              "allowedValues": [
                "Premium_LRS",
                "Premium_ZRS",
                "Standard_GRS",
                "Standard_GZRS",
                "Standard_LRS",
                "Standard_RAGRS",
                "Standard_RAGZRS",
                "Standard_ZRS"
              ]
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "storageAccountName": {
              "type": "string"
            },
            "containerName": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2021-04-01",
              "name": "[uniqueString(parameters('storageAccountName'), resourceGroup().id)]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "[parameters('storageAccountType')]"
              },
              "kind": "StorageV2",
              "properties": {}
            },
            {
              "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
              "apiVersion": "2021-06-01",
              "name": "[format('{0}/default/{1}', uniqueString(parameters('storageAccountName'), resourceGroup().id), parameters('containerName'))]",
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', uniqueString(parameters('storageAccountName'), resourceGroup().id))]"
              ]
            }
          ],
          "outputs": {
            "storageAccountName": {
              "type": "string",
              "value": "[uniqueString(parameters('storageAccountName'), resourceGroup().id)]"
            },
            "storageAccountId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Storage/storageAccounts', uniqueString(parameters('storageAccountName'), resourceGroup().id))]"
            }
          }
        }
      },
      "dependsOn": [
        "resourceGroups"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('aa-deployment-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[variables('subscriptionId')]",
      "resourceGroup": "[variables('rg')[0]]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "automationAccountName": {
            "value": "[variables('automationAccountNameValue')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "runbookNames": {
            "value": "[variables('runbooks')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.7.4.23292",
              "templateHash": "7528834214838154962"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "automationAccountName": {
              "type": "string"
            },
            "runbookNames": {
              "type": "array"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Automation/automationAccounts",
              "apiVersion": "2021-06-22",
              "name": "[parameters('automationAccountName')]",
              "location": "[parameters('location')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "sku": {
                  "name": "Basic"
                },
                "encryption": {
                  "keySource": "Microsoft.Automation",
                  "identity": {}
                }
              }
            },
            {
              "copy": {
                "name": "runbookDeployment",
                "count": "[length(parameters('runbookNames'))]"
              },
              "type": "Microsoft.Automation/automationAccounts/runbooks",
              "apiVersion": "2019-06-01",
              "name": "[format('{0}/{1}', parameters('automationAccountName'), parameters('runbookNames')[copyIndex()].name)]",
              "location": "[parameters('location')]",
              "properties": {
                "runbookType": "PowerShell",
                "logProgress": true,
                "logVerbose": true,
                "publishContentLink": {
                  "uri": "[parameters('runbookNames')[copyIndex()].uri]",
                  "version": "1.0.0.0"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName'))]"
              ]
            }
          ],
          "outputs": {
            "aaIdentityId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName')), '2021-06-22', 'full').identity.principalId]"
            },
            "aaLocation": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Automation/automationAccounts', parameters('automationAccountName')), '2021-06-22', 'full').location]"
            }
          }
        }
      },
      "dependsOn": [
        "resourceGroups"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('automationAccountConnection-deployment-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[variables('subscriptionId')]",
      "resourceGroup": "[variables('rg')[1]]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "connection_azureautomation_name": {
            "value": "[variables('automationAccountConnectionName')]"
          },
          "subscriptionId": {
            "value": "[variables('subscriptionId')]"
          },
          "displayName": {
            "value": "[variables('automationAccountConnectionName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.7.4.23292",
              "templateHash": "16463077532820351799"
            }
          },
          "parameters": {
            "connection_azureautomation_name": {
              "type": "string"
            },
            "subscriptionId": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "displayName": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[parameters('connection_azureautomation_name')]",
              "location": "[parameters('location')]",
              "kind": "V1",
              "properties": {
                "displayName": "[parameters('displayName')]",
                "parameterValueType": "Alternative",
                "customParameterValues": {},
                "api": {
                  "id": "[format('/subscriptions/{0}/providers/Microsoft.Web/locations/{1}/managedApis/azureautomation', parameters('subscriptionId'), resourceGroup().location)]"
                },
                "testLinks": []
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('rg')[0]), 'Microsoft.Resources/deployments', format('aa-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "resourceGroups",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('rg')[2]), 'Microsoft.Resources/deployments', format('sa-deployment-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('blobConnection-deployment-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[variables('subscriptionId')]",
      "resourceGroup": "[variables('rg')[1]]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "storageName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('rg')[2]), 'Microsoft.Resources/deployments', format('sa-deployment-{0}', parameters('deploymentNameSuffix')))).outputs.storageAccountName.value]"
          },
          "name": {
            "value": "[variables('blobConnectionName')]"
          },
          "saResourceGroup": {
            "value": "[variables('rg')[2]]"
          },
          "subscriptionId": {
            "value": "[variables('subscriptionId')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.7.4.23292",
              "templateHash": "16731106339222470089"
            }
          },
          "parameters": {
            "storageName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "subscriptionId": {
              "type": "string"
            },
            "saResourceGroup": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[parameters('name')]",
              "kind": "V1",
              "location": "[parameters('location')]",
              "properties": {
                "displayName": "[format('{0}-blobconnection', parameters('storageName'))]",
                "parameterValues": {
                  "accountName": "[parameters('storageName')]",
                  "accessKey": "[listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('saResourceGroup')), 'Microsoft.Storage/storageAccounts', parameters('storageName')), '2021-06-01').keys[0].value]"
                },
                "api": {
                  "name": "[parameters('name')]",
                  "id": "[format('/subscriptions/{0}/providers/Microsoft.Web/locations/{1}/managedApis/azureblob', subscription().subscriptionId, resourceGroup().location)]",
                  "type": "Microsoft.Web/locations/managedApis"
                }
              }
            }
          ],
          "outputs": {
            "blobConnectionId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Web/connections', parameters('name'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('rg')[0]), 'Microsoft.Resources/deployments', format('aa-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('rg')[1]), 'Microsoft.Resources/deployments', format('automationAccountConnection-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "resourceGroups",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('rg')[2]), 'Microsoft.Resources/deployments', format('sa-deployment-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('o365Connection-deployment-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[variables('subscriptionId')]",
      "resourceGroup": "[variables('rg')[1]]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "displayName": {
            "value": "[variables('officeConnectionName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "subscriptionId": {
            "value": "[variables('subscriptionId')]"
          },
          "connection_azureautomation_name": {
            "value": "[variables('officeConnectionName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.7.4.23292",
              "templateHash": "7922443813728630339"
            }
          },
          "parameters": {
            "connection_azureautomation_name": {
              "type": "string"
            },
            "subscriptionId": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "displayName": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[parameters('connection_azureautomation_name')]",
              "location": "[parameters('location')]",
              "kind": "V1",
              "properties": {
                "displayName": "[parameters('displayName')]",
                "customParameterValues": {},
                "api": {
                  "id": "[format('/subscriptions/{0}/providers/Microsoft.Web/locations/{1}/managedApis/office365', parameters('subscriptionId'), resourceGroup().location)]"
                },
                "testLinks": []
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('rg')[0]), 'Microsoft.Resources/deployments', format('aa-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('rg')[1]), 'Microsoft.Resources/deployments', format('automationAccountConnection-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "resourceGroups",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('rg')[2]), 'Microsoft.Resources/deployments', format('sa-deployment-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('rbac-aaConnector-deployment-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[variables('subscriptionId')]",
      "resourceGroup": "[variables('rg')[0]]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "principalId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('rg')[1]), 'Microsoft.Resources/deployments', format('getImageVersionlogicApp-deployment-{0}', parameters('deploymentNameSuffix')))).outputs.imagePrincipalId.value]"
          },
          "roleId": {
            "value": "[variables('roleId')]"
          },
          "scope": {
            "value": "resourceGroup().id"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.7.4.23292",
              "templateHash": "414560045777364444"
            }
          },
          "parameters": {
            "canDelegate": {
              "type": "bool",
              "defaultValue": false
            },
            "description": {
              "type": "string",
              "defaultValue": "Contributor RBAC permission"
            },
            "principalId": {
              "type": "string"
            },
            "roleId": {
              "type": "string"
            },
            "scope": {
              "type": "string",
              "defaultValue": "[resourceGroup().id]"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "name": "[guid(parameters('scope'), parameters('principalId'), parameters('roleId'))]",
              "properties": {
                "canDelegate": "[parameters('canDelegate')]",
                "description": "[parameters('description')]",
                "principalId": "[parameters('principalId')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('roleId'))]"
              }
            }
          ],
          "outputs": {
            "rbac": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Authorization/roleAssignments', guid(parameters('scope'), parameters('principalId'), parameters('roleId')))).roleDefinitionId]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('rg')[0]), 'Microsoft.Resources/deployments', format('aa-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('rg')[1]), 'Microsoft.Resources/deployments', format('automationAccountConnection-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('rg')[1]), 'Microsoft.Resources/deployments', format('blobConnection-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('rg')[1]), 'Microsoft.Resources/deployments', format('getBlobUpdateLogicApp-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('rg')[1]), 'Microsoft.Resources/deployments', format('getImageVersionlogicApp-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "resourceGroups",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('rg')[2]), 'Microsoft.Resources/deployments', format('sa-deployment-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('rbac-blobConnector-deployment-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[variables('subscriptionId')]",
      "resourceGroup": "[variables('rg')[0]]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "principalId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('rg')[1]), 'Microsoft.Resources/deployments', format('getBlobUpdateLogicApp-deployment-{0}', parameters('deploymentNameSuffix')))).outputs.blobPrincipalId.value]"
          },
          "roleId": {
            "value": "[variables('roleId')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.7.4.23292",
              "templateHash": "414560045777364444"
            }
          },
          "parameters": {
            "canDelegate": {
              "type": "bool",
              "defaultValue": false
            },
            "description": {
              "type": "string",
              "defaultValue": "Contributor RBAC permission"
            },
            "principalId": {
              "type": "string"
            },
            "roleId": {
              "type": "string"
            },
            "scope": {
              "type": "string",
              "defaultValue": "[resourceGroup().id]"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "name": "[guid(parameters('scope'), parameters('principalId'), parameters('roleId'))]",
              "properties": {
                "canDelegate": "[parameters('canDelegate')]",
                "description": "[parameters('description')]",
                "principalId": "[parameters('principalId')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('roleId'))]"
              }
            }
          ],
          "outputs": {
            "rbac": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Authorization/roleAssignments', guid(parameters('scope'), parameters('principalId'), parameters('roleId')))).roleDefinitionId]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('rg')[0]), 'Microsoft.Resources/deployments', format('aa-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('rg')[1]), 'Microsoft.Resources/deployments', format('automationAccountConnection-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('rg')[1]), 'Microsoft.Resources/deployments', format('blobConnection-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('rg')[1]), 'Microsoft.Resources/deployments', format('getBlobUpdateLogicApp-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('rg')[1]), 'Microsoft.Resources/deployments', format('getImageVersionlogicApp-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "resourceGroups",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('rg')[2]), 'Microsoft.Resources/deployments', format('sa-deployment-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('rbacHost-automationAccount-deployment-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[variables('subscriptionId')]",
      "resourceGroup": "[parameters('hostPoolResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "principalId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('rg')[0]), 'Microsoft.Resources/deployments', format('aa-deployment-{0}', parameters('deploymentNameSuffix')))).outputs.aaIdentityId.value]"
          },
          "roleId": {
            "value": "[variables('roleId')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.7.4.23292",
              "templateHash": "414560045777364444"
            }
          },
          "parameters": {
            "canDelegate": {
              "type": "bool",
              "defaultValue": false
            },
            "description": {
              "type": "string",
              "defaultValue": "Contributor RBAC permission"
            },
            "principalId": {
              "type": "string"
            },
            "roleId": {
              "type": "string"
            },
            "scope": {
              "type": "string",
              "defaultValue": "[resourceGroup().id]"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "name": "[guid(parameters('scope'), parameters('principalId'), parameters('roleId'))]",
              "properties": {
                "canDelegate": "[parameters('canDelegate')]",
                "description": "[parameters('description')]",
                "principalId": "[parameters('principalId')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('roleId'))]"
              }
            }
          ],
          "outputs": {
            "rbac": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Authorization/roleAssignments', guid(parameters('scope'), parameters('principalId'), parameters('roleId')))).roleDefinitionId]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('rg')[0]), 'Microsoft.Resources/deployments', format('aa-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('rg')[1]), 'Microsoft.Resources/deployments', format('automationAccountConnection-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('rg')[1]), 'Microsoft.Resources/deployments', format('blobConnection-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('rg')[1]), 'Microsoft.Resources/deployments', format('getBlobUpdateLogicApp-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('rg')[1]), 'Microsoft.Resources/deployments', format('getImageVersionlogicApp-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "resourceGroups",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('rg')[2]), 'Microsoft.Resources/deployments', format('sa-deployment-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('rbacSession-automationAccount-deployment-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[variables('subscriptionId')]",
      "resourceGroup": "[parameters('sessionHostResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "principalId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('rg')[0]), 'Microsoft.Resources/deployments', format('aa-deployment-{0}', parameters('deploymentNameSuffix')))).outputs.aaIdentityId.value]"
          },
          "roleId": {
            "value": "[variables('roleId')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.7.4.23292",
              "templateHash": "414560045777364444"
            }
          },
          "parameters": {
            "canDelegate": {
              "type": "bool",
              "defaultValue": false
            },
            "description": {
              "type": "string",
              "defaultValue": "Contributor RBAC permission"
            },
            "principalId": {
              "type": "string"
            },
            "roleId": {
              "type": "string"
            },
            "scope": {
              "type": "string",
              "defaultValue": "[resourceGroup().id]"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "name": "[guid(parameters('scope'), parameters('principalId'), parameters('roleId'))]",
              "properties": {
                "canDelegate": "[parameters('canDelegate')]",
                "description": "[parameters('description')]",
                "principalId": "[parameters('principalId')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('roleId'))]"
              }
            }
          ],
          "outputs": {
            "rbac": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Authorization/roleAssignments', guid(parameters('scope'), parameters('principalId'), parameters('roleId')))).roleDefinitionId]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('rg')[0]), 'Microsoft.Resources/deployments', format('aa-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('rg')[1]), 'Microsoft.Resources/deployments', format('automationAccountConnection-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('rg')[1]), 'Microsoft.Resources/deployments', format('blobConnection-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('rg')[1]), 'Microsoft.Resources/deployments', format('getBlobUpdateLogicApp-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('rg')[1]), 'Microsoft.Resources/deployments', format('getImageVersionlogicApp-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "resourceGroups",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('rg')[2]), 'Microsoft.Resources/deployments', format('sa-deployment-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('rbac-automationAccountOwner-deployment-{0}', parameters('deploymentNameSuffix'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "principalId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('rg')[0]), 'Microsoft.Resources/deployments', format('aa-deployment-{0}', parameters('deploymentNameSuffix')))).outputs.aaIdentityId.value]"
          },
          "scope": {
            "value": "[subscription().id]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.7.4.23292",
              "templateHash": "14206020095114362973"
            }
          },
          "parameters": {
            "canDelegate": {
              "type": "bool",
              "defaultValue": false
            },
            "description": {
              "type": "string",
              "defaultValue": "Owner RBAC permission"
            },
            "principalId": {
              "type": "string"
            },
            "scope": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "name": "[guid(parameters('scope'), parameters('principalId'), '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "properties": {
                "canDelegate": "[parameters('canDelegate')]",
                "description": "[parameters('description')]",
                "principalId": "[parameters('principalId')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                "principalType": "ServicePrincipal"
              }
            }
          ],
          "outputs": {
            "rbac": {
              "type": "string",
              "value": "[reference(subscriptionResourceId('Microsoft.Authorization/roleAssignments', guid(parameters('scope'), parameters('principalId'), '8e3af657-a8ff-443c-a75c-2fe8c4bcb635'))).roleDefinitionId]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('rg')[0]), 'Microsoft.Resources/deployments', format('aa-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('rg')[1]), 'Microsoft.Resources/deployments', format('automationAccountConnection-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('rg')[1]), 'Microsoft.Resources/deployments', format('blobConnection-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('rg')[1]), 'Microsoft.Resources/deployments', format('getBlobUpdateLogicApp-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('rg')[1]), 'Microsoft.Resources/deployments', format('getImageVersionlogicApp-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "resourceGroups",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('rg')[2]), 'Microsoft.Resources/deployments', format('sa-deployment-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('getImageVersionlogicApp-deployment-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[variables('subscriptionId')]",
      "resourceGroup": "[variables('rg')[1]]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "dayOfWeek": {
            "value": "[parameters('dayOfWeek')]"
          },
          "startTime": {
            "value": "[parameters('startTime')]"
          },
          "dayOfWeekOccurrence": {
            "value": "[parameters('dayOfWeekOccurrence')]"
          },
          "cloud": {
            "value": "[variables('cloud')]"
          },
          "officeConnectionName": {
            "value": "[variables('officeConnectionName')]"
          },
          "subscriptionId": {
            "value": "[variables('subscriptionId')]"
          },
          "tenantId": {
            "value": "[variables('tenantId')]"
          },
          "templateSpecId": {
            "value": "[parameters('templateSpecId')]"
          },
          "emailContact": {
            "value": "[parameters('emailContact')]"
          },
          "workflows_GetImageVersion_name": {
            "value": "[variables('workflows_GetImageVersion_name')]"
          },
          "automationAccountConnectionName": {
            "value": "[variables('automationAccountConnectionName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "state": {
            "value": "[variables('state')]"
          },
          "recurrenceFrequency": {
            "value": "[parameters('recurrenceFrequency')]"
          },
          "recurrenceType": {
            "value": "[variables('recurrenceType')]"
          },
          "recurrenceInterval": {
            "value": "[parameters('recurrenceInterval')]"
          },
          "automationAccountName": {
            "value": "[variables('automationAccountNameValue')]"
          },
          "automationAccountLocation": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('rg')[0]), 'Microsoft.Resources/deployments', format('aa-deployment-{0}', parameters('deploymentNameSuffix')))).outputs.aaLocation.value]"
          },
          "automationAccountResourceGroup": {
            "value": "[variables('rg')[0]]"
          },
          "runbookNewHostPoolRipAndReplace": {
            "value": "[variables('runbookNewHostPoolRipAndReplace')]"
          },
          "getRunbookScheduleRunbookName": {
            "value": "[variables('runbookScheduleRunbookName')]"
          },
          "getRunbookGetSessionHostVm": {
            "value": "[variables('runbookGetSessionHostVm')]"
          },
          "getGetMarketPlaceImageVersion": {
            "value": "[variables('runbookMarketPlaceImageVersion')]"
          },
          "waitForRunBook": {
            "value": "[variables('waitForRunBook')]"
          },
          "hostPoolName": {
            "value": "[parameters('hostPoolName')]"
          },
          "identityType": {
            "value": "[variables('identityType')]"
          },
          "keyVaultName": {
            "value": "[parameters('keyVaultName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.7.4.23292",
              "templateHash": "8562123880860742344"
            }
          },
          "parameters": {
            "workflows_GetImageVersion_name": {
              "type": "string"
            },
            "automationAccountConnectionName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "state": {
              "type": "string"
            },
            "recurrenceFrequency": {
              "type": "string"
            },
            "recurrenceInterval": {
              "type": "int"
            },
            "recurrenceType": {
              "type": "string"
            },
            "automationAccountName": {
              "type": "string"
            },
            "automationAccountResourceGroup": {
              "type": "string"
            },
            "automationAccountLocation": {
              "type": "string"
            },
            "runbookNewHostPoolRipAndReplace": {
              "type": "string"
            },
            "getRunbookScheduleRunbookName": {
              "type": "string"
            },
            "getRunbookGetSessionHostVm": {
              "type": "string"
            },
            "getGetMarketPlaceImageVersion": {
              "type": "string"
            },
            "waitForRunBook": {
              "type": "bool"
            },
            "identityType": {
              "type": "string"
            },
            "emailContact": {
              "type": "string"
            },
            "officeConnectionName": {
              "type": "string"
            },
            "startTime": {
              "type": "string"
            },
            "dayOfWeek": {
              "type": "string"
            },
            "dayOfWeekOccurrence": {
              "type": "string"
            },
            "cloud": {
              "type": "string"
            },
            "tenantId": {
              "type": "string"
            },
            "subscriptionId": {
              "type": "string"
            },
            "hostPoolName": {
              "type": "string"
            },
            "templateSpecId": {
              "type": "string"
            },
            "keyVaultName": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Logic/workflows",
              "apiVersion": "2017-07-01",
              "name": "[parameters('workflows_GetImageVersion_name')]",
              "location": "[parameters('location')]",
              "identity": {
                "type": "[parameters('identityType')]"
              },
              "properties": {
                "state": "[parameters('state')]",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "defaultValue": {},
                      "type": "Object"
                    }
                  },
                  "triggers": {
                    "Recurrence": {
                      "recurrence": {
                        "frequency": "[parameters('recurrenceFrequency')]",
                        "interval": "[parameters('recurrenceInterval')]"
                      },
                      "evaluatedRecurrence": {
                        "frequency": "[parameters('recurrenceFrequency')]",
                        "interval": "[parameters('recurrenceInterval')]"
                      },
                      "type": "[parameters('recurrenceType')]"
                    }
                  },
                  "actions": {
                    "Check_for_Existing_Schedule": {
                      "runAfter": {
                        "Parse_Session_Host_VM_and_RG": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": {
                          "properties": {
                            "parameters": {
                              "AutomationAccountName": "[parameters('automationAccountName')]",
                              "ResourceGroupName": "[parameters('automationAccountResourceGroup')]",
                              "runbookName": "[parameters('runbookNewHostPoolRipAndReplace')]",
                              "Environment": "[parameters('cloud')]",
                              "HostpoolName": "[parameters('hostPoolName')]"
                            }
                          }
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azureautomation']['connectionId']"
                          }
                        },
                        "method": "put",
                        "path": "[concat(format('/subscriptions/@{{encodeURIComponent(''{0}'')}}/resourceGroups/@{{encodeURIComponent(''{1}'')}}/providers/Microsoft.Automation/automationAccounts/@{{encodeURIComponent(''{2}'')}}/jobs', parameters('subscriptionId'), parameters('automationAccountResourceGroup'), parameters('automationAccountName')))]",
                        "queries": {
                          "runbookName": "[parameters('getRunbookScheduleRunbookName')]",
                          "wait": "[parameters('waitForRunBook')]",
                          "x-ms-api-version": "2015-10-31"
                        }
                      }
                    },
                    "Schedule_and_New_Image_Condition": {
                      "actions": {
                        "Approval_Condition": {
                          "actions": {
                            "Create_schedule_for_host_pool_rip_and_replace": {
                              "runAfter": {},
                              "type": "ApiConnection",
                              "inputs": {
                                "body": {
                                  "properties": {
                                    "parameters": {
                                      "AutomationAccountName": "[parameters('automationAccountName')]",
                                      "ResourceGroupName": "[parameters('automationAccountResourceGroup')]",
                                      "ScheduleName": "[format('{0}-ScheduleForRipAndReplace', parameters('hostPoolName'))]",
                                      "StartTime": "[parameters('startTime')]",
                                      "DayOfWeek": "[parameters('dayOfWeek')]",
                                      "DayOfWeekOccurrence": "[parameters('dayOfWeekOccurrence')]",
                                      "environment": "[parameters('cloud')]",
                                      "runbookName": "[parameters('runbookNewHostPoolRipAndReplace')]",
                                      "HostPoolName": "[parameters('hostPoolName')]",
                                      "TenantId": "[parameters('tenantId')]",
                                      "TemplateSpecId": "[parameters('templateSpecId')]",
                                      "SubscriptionId": "[parameters('subscriptionId')]",
                                      "KeyVault": "[parameters('keyVaultName')]"
                                    }
                                  }
                                },
                                "host": {
                                  "connection": {
                                    "name": "@parameters('$connections')['azureautomation']['connectionId']"
                                  }
                                },
                                "method": "put",
                                "path": "[format('/subscriptions/@{{encodeURIComponent(''{0}'')}}/resourceGroups/@{{encodeURIComponent(''{1}'')}}/providers/Microsoft.Automation/automationAccounts/@{{encodeURIComponent(''{2}'')}}/jobs', parameters('subscriptionId'), parameters('automationAccountResourceGroup'), parameters('automationAccountName'))]",
                                "queries": {
                                  "runbookName": "New-AutomationSchedule",
                                  "wait": true,
                                  "x-ms-api-version": "2015-10-31"
                                }
                              }
                            }
                          },
                          "runAfter": {
                            "Send_approval_email": [
                              "Succeeded"
                            ]
                          },
                          "else": {
                            "actions": {
                              "Terminate_2": {
                                "runAfter": {},
                                "type": "Terminate",
                                "inputs": {
                                  "runStatus": "Cancelled"
                                }
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@body('Send_approval_email')?['SelectedOption']",
                                  "Approve"
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "Send_approval_email": {
                          "runAfter": {},
                          "type": "ApiConnectionWebhook",
                          "inputs": {
                            "body": {
                              "Message": {
                                "Body": "[format('Hostpool: @{{body(''Parse_Session_Host_VM_and_RG'')?[''hostPool'']}}\n\n\nNew Image Status:  @{{body(''Parse_image_version'')?[''NewImageFound'']}}\n\n\nPlease approve schedule on the {0} {1} of the Month @ {2} for \"rip and replace\" of @{{body(''Parse_Session_Host_VM_and_RG'')?[''hostPool'']}} AVD enviroment. \n', parameters('dayOfWeekOccurrence'), parameters('dayOfWeek'), parameters('startTime'))]",
                                "HideHTMLMessage": true,
                                "Importance": "High",
                                "Options": "Approve, Reject",
                                "ShowHTMLConfirmationDialog": false,
                                "Subject": "New Image Found for AVD Hostpool Environment - @{body('Parse_Session_Host_VM_and_RG')?['hostPool']}. Please Approve or Reject Creating Automated Schedule for Updating AVD Environment",
                                "To": "[parameters('emailContact')]"
                              },
                              "NotificationUrl": "@{listCallbackUrl()}"
                            },
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['office365']['connectionId']"
                              }
                            },
                            "path": "/approvalmail/$subscriptions"
                          }
                        }
                      },
                      "runAfter": {
                        "Parse_image_version": [
                          "Succeeded"
                        ]
                      },
                      "else": {
                        "actions": {
                          "Terminate": {
                            "runAfter": {},
                            "type": "Terminate",
                            "inputs": {
                              "runStatus": "Cancelled"
                            }
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@body('Parse_Schedule')?['ScheduleFound']",
                              false
                            ]
                          },
                          {
                            "equals": [
                              "@body('Parse_image_version')?['NewImageFound']",
                              true
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Get_Session_Host_VM": {
                      "runAfter": {},
                      "type": "ApiConnection",
                      "inputs": {
                        "body": {
                          "properties": {
                            "parameters": {
                              "hostpoolName": "[parameters('hostPoolName')]",
                              "Environment": "[parameters('cloud')]"
                            }
                          }
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azureautomation']['connectionId']"
                          }
                        },
                        "method": "put",
                        "path": "[concat(format('/subscriptions/@{{encodeURIComponent(''{0}'')}}/resourceGroups/@{{encodeURIComponent(''{1}'')}}/providers/Microsoft.Automation/automationAccounts/@{{encodeURIComponent(''{2}'')}}/jobs', parameters('subscriptionId'), parameters('automationAccountResourceGroup'), parameters('automationAccountName')))]",
                        "queries": {
                          "runbookName": "[parameters('getRunbookGetSessionHostVm')]",
                          "wait": true,
                          "x-ms-api-version": "2015-10-31"
                        }
                      }
                    },
                    "Get_Job_Output": {
                      "runAfter": {
                        "Get_Session_Host_VM": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azureautomation']['connectionId']"
                          }
                        },
                        "method": "get",
                        "path": "[concat(format('/subscriptions/@{{encodeURIComponent(''{0}'')}}/resourceGroups/@{{encodeURIComponent(''{1}'')}}/providers/Microsoft.Automation/automationAccounts/@{{encodeURIComponent(''{2}'')}}/jobs/@{{encodeURIComponent(body(''Get_Session_Host_VM'')?[''properties'']?[''jobId''])}}/output', parameters('subscriptionId'), parameters('automationAccountResourceGroup'), parameters('automationAccountName')))]",
                        "queries": {
                          "x-ms-api-version": "2015-10-31"
                        }
                      }
                    },
                    "Get_Job_Output_of_Marketplace_Image_Version": {
                      "runAfter": {
                        "Get_Marketplace_Image_Version": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azureautomation']['connectionId']"
                          }
                        },
                        "method": "get",
                        "path": "[concat(format('/subscriptions/@{{encodeURIComponent(''{0}'')}}/resourceGroups/@{{encodeURIComponent(''{1}'')}}/providers/Microsoft.Automation/automationAccounts/@{{encodeURIComponent(''{2}'')}}/jobs/@{{encodeURIComponent(body(''Get_Marketplace_Image_Version'')?[''properties'']?[''jobId''])}}/output', parameters('subscriptionId'), parameters('automationAccountResourceGroup'), parameters('automationAccountName')))]",
                        "queries": {
                          "x-ms-api-version": "2015-10-31"
                        }
                      }
                    },
                    "Get_Marketplace_Image_Version": {
                      "runAfter": {
                        "Parse_Schedule": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": {
                          "properties": {
                            "parameters": {
                              "ResourceGroupName": "@body('Parse_Session_Host_VM_and_RG')?['productionVmRg']",
                              "VMName": "@body('Parse_Session_Host_VM_and_RG')?['productionVm']",
                              "Environment": "[parameters('cloud')]"
                            }
                          }
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azureautomation']['connectionId']"
                          }
                        },
                        "method": "put",
                        "path": "[concat(format('/subscriptions/@{{encodeURIComponent(''{0}'')}}/resourceGroups/@{{encodeURIComponent(''{1}'')}}/providers/Microsoft.Automation/automationAccounts/@{{encodeURIComponent(''{2}'')}}/jobs', parameters('subscriptionId'), parameters('automationAccountResourceGroup'), parameters('automationAccountName')))]",
                        "queries": {
                          "runbookName": "[parameters('getGetMarketPlaceImageVersion')]",
                          "wait": true,
                          "x-ms-api-version": "2015-10-31"
                        }
                      }
                    },
                    "Get_Output_from_Runbook_Get-RunBookSchedule": {
                      "runAfter": {
                        "Check_for_Existing_Schedule": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azureautomation']['connectionId']"
                          }
                        },
                        "method": "get",
                        "path": "[concat(format('/subscriptions/@{{encodeURIComponent(''{0}'')}}/resourceGroups/@{{encodeURIComponent(''{1}'')}}/providers/Microsoft.Automation/automationAccounts/@{{encodeURIComponent(''{2}'')}}/jobs/@{{encodeURIComponent(body(''Check_for_Existing_Schedule'')?[''properties'']?[''jobId''])}}/output', parameters('subscriptionId'), parameters('automationAccountResourceGroup'), parameters('automationAccountName')))]",
                        "queries": {
                          "x-ms-api-version": "2015-10-31"
                        }
                      }
                    },
                    "Parse_Schedule": {
                      "runAfter": {
                        "Get_Output_from_Runbook_Get-RunBookSchedule": [
                          "Succeeded"
                        ]
                      },
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@body('Get_Output_from_Runbook_Get-RunBookSchedule')",
                        "schema": {
                          "properties": {
                            "ScheduleFound": {
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        }
                      }
                    },
                    "Parse_Session_Host_VM_and_RG": {
                      "runAfter": {
                        "Get_Job_Output": [
                          "Succeeded"
                        ]
                      },
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@body('Get_job_output')",
                        "schema": {
                          "properties": {
                            "hostPool": {
                              "type": "string"
                            },
                            "productionVM": {
                              "type": "string"
                            },
                            "productionVmRg": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      }
                    },
                    "Parse_image_version": {
                      "runAfter": {
                        "Get_Job_Output_of_Marketplace_Image_Version": [
                          "Succeeded"
                        ]
                      },
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@body('Get_Job_Output_of_Marketplace_Image_Version')",
                        "schema": {
                          "properties": {
                            "NewImageFound": {
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        }
                      }
                    }
                  },
                  "outputs": {}
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "azureautomation": {
                        "connectionId": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Web/connections/{2}', parameters('subscriptionId'), resourceGroup().name, parameters('automationAccountConnectionName'))]",
                        "connectionName": "[parameters('automationAccountConnectionName')]",
                        "connectionProperties": {
                          "authentication": {
                            "type": "ManagedServiceIdentity"
                          }
                        },
                        "id": "[concat(format('/subscriptions/{0}/providers/Microsoft.Web/locations/{1}/managedApis/azureautomation', parameters('subscriptionId'), parameters('automationAccountLocation')))]"
                      },
                      "office365": {
                        "connectionId": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Web/connections/{2}', parameters('subscriptionId'), resourceGroup().name, parameters('officeConnectionName'))]",
                        "connectionName": "[parameters('officeConnectionName')]",
                        "id": "[format('/subscriptions/{0}/providers/Microsoft.Web/locations/{1}/managedApis/office365', parameters('subscriptionId'), parameters('automationAccountLocation'))]"
                      }
                    }
                  }
                }
              }
            }
          ],
          "outputs": {
            "imagePrincipalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Logic/workflows', parameters('workflows_GetImageVersion_name')), '2017-07-01', 'full').identity.principalId]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('rg')[0]), 'Microsoft.Resources/deployments', format('aa-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('rg')[1]), 'Microsoft.Resources/deployments', format('automationAccountConnection-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('rg')[1]), 'Microsoft.Resources/deployments', format('blobConnection-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('rg')[1]), 'Microsoft.Resources/deployments', format('kv-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('rg')[1]), 'Microsoft.Resources/deployments', format('o365Connection-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "resourceGroups",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('rg')[2]), 'Microsoft.Resources/deployments', format('sa-deployment-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('getBlobUpdateLogicApp-deployment-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[variables('subscriptionId')]",
      "resourceGroup": "[variables('rg')[1]]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "workflows_GetBlobUpdate_name": {
            "value": "[variables('workflows_GetBlobUpdate_name')]"
          },
          "automationAccountConnectionName": {
            "value": "[variables('automationAccountConnectionName')]"
          },
          "automationAccountName": {
            "value": "[variables('automationAccountNameValue')]"
          },
          "automationAccountResourceGroup": {
            "value": "[variables('rg')[0]]"
          },
          "blobConnectionName": {
            "value": "[variables('blobConnectionName')]"
          },
          "identityType": {
            "value": "[variables('identityType')]"
          },
          "state": {
            "value": "[variables('state')]"
          },
          "schema": {
            "value": "[variables('schema')]"
          },
          "contentVersion": {
            "value": "[variables('contentVersion')]"
          },
          "connectionType": {
            "value": "[variables('connectionType')]"
          },
          "triggerFrequency": {
            "value": "[parameters('triggerFrequency')]"
          },
          "triggerInterval": {
            "value": "[parameters('triggerInterval')]"
          },
          "storageAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('rg')[2]), 'Microsoft.Resources/deployments', format('sa-deployment-{0}', parameters('deploymentNameSuffix')))).outputs.storageAccountName.value]"
          },
          "container": {
            "value": "[parameters('container')]"
          },
          "hostPoolName": {
            "value": "[parameters('hostPoolName')]"
          },
          "checkBothCreatedAndModifiedDateTime": {
            "value": "[variables('checkBothCreatedAndModifiedDateTime')]"
          },
          "maxFileCount": {
            "value": "[variables('maxFileCount')]"
          },
          "subscriptionId": {
            "value": "[variables('subscriptionId')]"
          },
          "runbookGetRunBookSchedule": {
            "value": "[variables('runbookScheduleRunbookName')]"
          },
          "runbookGetSessionHostVirtualMachine": {
            "value": "[variables('runbookGetSessionHostVm')]"
          },
          "runbookNewHostPoolRipAndReplace": {
            "value": "[variables('runbookNewHostPoolRipAndReplace')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.7.4.23292",
              "templateHash": "4200692499986013662"
            }
          },
          "parameters": {
            "subscriptionId": {
              "type": "string"
            },
            "workflows_GetBlobUpdate_name": {
              "type": "string"
            },
            "automationAccountConnectionName": {
              "type": "string"
            },
            "automationAccountResourceGroup": {
              "type": "string"
            },
            "automationAccountName": {
              "type": "string"
            },
            "blobConnectionName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "identityType": {
              "type": "string"
            },
            "state": {
              "type": "string"
            },
            "schema": {
              "type": "string"
            },
            "contentVersion": {
              "type": "string"
            },
            "connectionType": {
              "type": "string"
            },
            "triggerFrequency": {
              "type": "string"
            },
            "triggerInterval": {
              "type": "int"
            },
            "container": {
              "type": "string"
            },
            "hostPoolName": {
              "type": "string"
            },
            "checkBothCreatedAndModifiedDateTime": {
              "type": "bool"
            },
            "maxFileCount": {
              "type": "int"
            },
            "runbookNewHostPoolRipAndReplace": {
              "type": "string"
            },
            "runbookGetRunBookSchedule": {
              "type": "string"
            },
            "runbookGetSessionHostVirtualMachine": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Logic/workflows",
              "apiVersion": "2017-07-01",
              "name": "[parameters('workflows_GetBlobUpdate_name')]",
              "location": "[parameters('location')]",
              "identity": {
                "type": "[parameters('identityType')]"
              },
              "properties": {
                "state": "[parameters('state')]",
                "definition": {
                  "$schema": "[parameters('schema')]",
                  "contentVersion": "[parameters('contentVersion')]",
                  "parameters": {
                    "$connections": {
                      "defaultValue": {},
                      "type": "[parameters('connectionType')]"
                    }
                  },
                  "triggers": {
                    "When_a_blob_is_added_or_modified_(properties_only)_(V2)": {
                      "recurrence": {
                        "frequency": "[parameters('triggerFrequency')]",
                        "interval": "[parameters('triggerInterval')]"
                      },
                      "evaluatedRecurrence": {
                        "frequency": "[parameters('triggerFrequency')]",
                        "interval": "[parameters('triggerInterval')]"
                      },
                      "splitOn": "@triggerBody()",
                      "metadata": {
                        "container": "[format('/{0}', parameters('container'))]"
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azureblob']['connectionId']"
                          }
                        },
                        "method": "get",
                        "path": "[format('/v2/datasets/@{{encodeURIComponent(encodeURIComponent(''{0}''))}}/triggers/batch/onupdatedfile', parameters('storageAccountName'))]",
                        "queries": {
                          "checkBothCreatedAndModifiedDateTime": "[parameters('checkBothCreatedAndModifiedDateTime')]",
                          "folderId": "[format('/{0}', parameters('container'))]",
                          "maxFileCount": "[parameters('maxFileCount')]"
                        }
                      }
                    }
                  },
                  "actions": {
                    "Condition": {
                      "actions": {
                        "Create_job_2": {
                          "runAfter": {},
                          "type": "ApiConnection",
                          "inputs": {
                            "body": {
                              "properties": {
                                "parameters": {
                                  "hostpoolName": "[parameters('hostPoolName')]"
                                }
                              }
                            },
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['azureautomation']['connectionId']"
                              }
                            },
                            "method": "put",
                            "path": "[format('/subscriptions/@{{encodeURIComponent(''{0}'')}}/resourceGroups/@{{encodeURIComponent(''{1}'')}}/providers/Microsoft.Automation/automationAccounts/@{{encodeURIComponent(''{2}'')}}/jobs', parameters('subscriptionId'), parameters('automationAccountResourceGroup'), parameters('automationAccountName'))]",
                            "queries": {
                              "runbookName": "[parameters('runbookGetSessionHostVirtualMachine')]",
                              "wait": true,
                              "x-ms-api-version": "2015-10-31"
                            }
                          }
                        },
                        "Create_job_3": {
                          "runAfter": {
                            "Parse_JSON_2": [
                              "Succeeded"
                            ]
                          },
                          "type": "ApiConnection",
                          "inputs": {
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['azureautomation']['connectionId']"
                              }
                            },
                            "method": "put",
                            "path": "[format('/subscriptions/@{{encodeURIComponent(''{0}'')}}/resourceGroups/@{{encodeURIComponent(''{1}'')}}/providers/Microsoft.Automation/automationAccounts/@{{encodeURIComponent(''{2}'')}}/jobs', parameters('subscriptionId'), parameters('automationAccountResourceGroup'), parameters('automationAccountName'))]",
                            "queries": {
                              "runbookName": "[parameters('runbookNewHostPoolRipAndReplace')]",
                              "wait": true,
                              "x-ms-api-version": "2015-10-31"
                            }
                          }
                        },
                        "Get_job_output_2": {
                          "runAfter": {
                            "Create_job_2": [
                              "Succeeded"
                            ]
                          },
                          "type": "ApiConnection",
                          "inputs": {
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['azureautomation']['connectionId']"
                              }
                            },
                            "method": "get",
                            "path": "[format('/subscriptions/@{{encodeURIComponent(''{0}'')}}/resourceGroups/@{{encodeURIComponent(''{1}'')}}/providers/Microsoft.Automation/automationAccounts/@{{encodeURIComponent(''{2}'')}}/jobs/@{{encodeURIComponent(body(''Create_job_2'')?[''properties'']?[''jobId''])}}/output', parameters('subscriptionId'), parameters('automationAccountResourceGroup'), parameters('automationAccountName'))]",
                            "queries": {
                              "x-ms-api-version": "2015-10-31"
                            }
                          }
                        },
                        "Parse_JSON_2": {
                          "runAfter": {
                            "Get_job_output_2": [
                              "Succeeded"
                            ]
                          },
                          "type": "ParseJson",
                          "inputs": {
                            "content": "@body('Get_job_output_2')",
                            "schema": {
                              "properties": {
                                "productionVM": {
                                  "type": "string"
                                },
                                "productionVmRg": {
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          }
                        }
                      },
                      "runAfter": {
                        "Parse_JSON": [
                          "Succeeded"
                        ]
                      },
                      "else": {
                        "actions": {
                          "Terminate": {
                            "runAfter": {},
                            "type": "Terminate",
                            "inputs": {
                              "runStatus": "Cancelled"
                            }
                          }
                        }
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@body('Parse_JSON')?['ScheduleFound']",
                              false
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Create_job": {
                      "runAfter": {},
                      "type": "ApiConnection",
                      "inputs": {
                        "body": {
                          "properties": {
                            "parameters": {
                              "AutomationAccountName": "[parameters('automationAccountName')]",
                              "ResourceGroupName": "[parameters('automationAccountResourceGroup')]",
                              "runbookName": "[parameters('runbookNewHostPoolRipAndReplace')]"
                            }
                          }
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azureautomation']['connectionId']"
                          }
                        },
                        "method": "put",
                        "path": "[format('/subscriptions/@{{encodeURIComponent(''{0}'')}}/resourceGroups/@{{encodeURIComponent(''{1}'')}}/providers/Microsoft.Automation/automationAccounts/@{{encodeURIComponent(''{2}'')}}/jobs', parameters('subscriptionId'), parameters('automationAccountResourceGroup'), parameters('automationAccountName'))]",
                        "queries": {
                          "runbookName": "[parameters('runbookGetRunBookSchedule')]",
                          "wait": true,
                          "x-ms-api-version": "2015-10-31"
                        }
                      }
                    },
                    "Get_job_output": {
                      "runAfter": {
                        "Create_job": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azureautomation']['connectionId']"
                          }
                        },
                        "method": "get",
                        "path": "[format('/subscriptions/@{{encodeURIComponent(''{0}'')}}/resourceGroups/@{{encodeURIComponent(''{1}'')}}/providers/Microsoft.Automation/automationAccounts/@{{encodeURIComponent(''{2}'')}}/jobs/@{{encodeURIComponent(body(''Create_job'')?[''properties'']?[''jobId''])}}/output', parameters('subscriptionId'), parameters('automationAccountResourceGroup'), parameters('automationAccountName'))]",
                        "queries": {
                          "x-ms-api-version": "2015-10-31"
                        }
                      }
                    },
                    "Parse_JSON": {
                      "runAfter": {
                        "Get_job_output": [
                          "Succeeded"
                        ]
                      },
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@body('Get_job_output')",
                        "schema": {
                          "properties": {
                            "ScheduleFound": {
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        }
                      }
                    }
                  },
                  "outputs": {}
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "azureautomation": {
                        "connectionId": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Web/connections/{2}', parameters('subscriptionId'), resourceGroup().name, parameters('automationAccountConnectionName'))]",
                        "connectionName": "[parameters('automationAccountConnectionName')]",
                        "connectionProperties": {
                          "authentication": {
                            "type": "ManagedServiceIdentity"
                          }
                        },
                        "id": "[format('/subscriptions/{0}/providers/Microsoft.Web/locations/{1}/managedApis/azureautomation', parameters('subscriptionId'), parameters('location'))]"
                      },
                      "azureblob": {
                        "connectionId": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Web/connections/{2}', parameters('subscriptionId'), resourceGroup().name, parameters('blobConnectionName'))]",
                        "connectionName": "[parameters('blobConnectionName')]",
                        "id": "[format('/subscriptions/{0}/providers/Microsoft.Web/locations/{1}/managedApis/azureblob', parameters('subscriptionId'), parameters('location'))]"
                      }
                    }
                  }
                }
              }
            }
          ],
          "outputs": {
            "blobPrincipalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Logic/workflows', parameters('workflows_GetBlobUpdate_name')), '2017-07-01', 'full').identity.principalId]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('rg')[0]), 'Microsoft.Resources/deployments', format('aa-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('rg')[1]), 'Microsoft.Resources/deployments', format('automationAccountConnection-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('rg')[1]), 'Microsoft.Resources/deployments', format('blobConnection-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "resourceGroups",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('rg')[2]), 'Microsoft.Resources/deployments', format('sa-deployment-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('kv-deployment-{0}', parameters('deploymentNameSuffix'))]",
      "subscriptionId": "[variables('subscriptionId')]",
      "resourceGroup": "[variables('rg')[1]]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "keyvaultName": {
            "value": "[parameters('keyVaultName')]"
          },
          "aaIdentityId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('rg')[0]), 'Microsoft.Resources/deployments', format('aa-deployment-{0}', parameters('deploymentNameSuffix')))).outputs.aaIdentityId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.7.4.23292",
              "templateHash": "3824080888532788675"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "The Azure Region to deploy the resources into"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags to apply to the Key Vault Instance"
              }
            },
            "keyvaultName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Key Vault"
              }
            },
            "aaIdentityId": {
              "type": "string",
              "metadata": {
                "description": "The id of the automation account"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2021-10-01",
              "name": "[parameters('keyvaultName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "createMode": "default",
                "enabledForDeployment": true,
                "enabledForDiskEncryption": false,
                "enabledForTemplateDeployment": true,
                "enableRbacAuthorization": true,
                "enablePurgeProtection": true,
                "networkAcls": {
                  "bypass": "AzureServices"
                },
                "sku": {
                  "family": "A",
                  "name": "standard"
                },
                "tenantId": "[subscription().tenantId]"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "name": "[guid(parameters('aaIdentityId'), subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4633458b-17de-408a-b874-0445c86b69e6'), parameters('keyvaultName'))]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4633458b-17de-408a-b874-0445c86b69e6')]",
                "principalId": "[parameters('aaIdentityId')]",
                "principalType": "ServicePrincipal"
              }
            }
          ],
          "outputs": {
            "keyVaultName": {
              "type": "string",
              "value": "[parameters('keyvaultName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('rg')[0]), 'Microsoft.Resources/deployments', format('aa-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('rg')[1]), 'Microsoft.Resources/deployments', format('automationAccountConnection-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "resourceGroups"
      ]
    }
  ],
  "outputs": {
    "automationAccountName": {
      "type": "string",
      "value": "[variables('automationAccountNameValue')]"
    },
    "storageAccountName": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('rg')[2]), 'Microsoft.Resources/deployments', format('sa-deployment-{0}', parameters('deploymentNameSuffix')))).outputs.storageAccountName.value]"
    },
    "ResourceGroups": {
      "type": "array",
      "value": "[array(concat(variables('automationAccountRgVar'), variables('logicAppRgVar'), variables('storageAccountRgVar')))]"
    },
    "keyVaultName": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('subscriptionId'), variables('rg')[1]), 'Microsoft.Resources/deployments', format('kv-deployment-{0}', parameters('deploymentNameSuffix')))).outputs.keyVaultName.value]"
    }
  }
}